#include <ndn-cxx/encoding/tlv.hpp>
#include <ndn-cxx/util/dummy-client-face.hpp>
#include <ndn-cxx/util/string-helper.hpp>

#include "../../../../shared/src/common-cxx.hpp"
#include "../../../../shared/src/common-nac.hpp"
#include "../../../../shared/src/common-ndn.hpp"
#include "../../../../shared/src/keychain.hpp"
#include "../../../../shared/src/security_helpers.hpp"
#include "../../../../shared/test/catch.hpp"

#include "../../../src/protocol/bt_session.hpp"
#include "../../../src/protocol/bt_state_3.hpp"
#include "../../../src/protocol/details/bootstrap_impl.hpp"
#include "../../../src/protocol/device_config.hpp"


namespace nacapp {
namespace protocol {
namespace impl {
namespace test {

using namespace ndn;

const std::string R2 = "abcde12345";
const std::string DEV_ID = "dv1";
const std::string DEV_NAME = "/local-home/bt/device/dv1";
const std::string OWNER = "/local-home/bt/owner";
const std::string STEP_3_DATA_NAME = "/local-home/bt/owner/auth/for/dv1";


const uint8_t CERT_DATA_OWNER[] =
  {0x06, 0xfd, 0x02, 0x32, 0x07, 0x33, 0x08, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x68, 0x6f,
   0x6d, 0x65, 0x08, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x08, 0x03, 0x4b, 0x45, 0x59, 0x08, 0x08,
   0x96, 0x51, 0x7d, 0xbc, 0xe3, 0xe7, 0x6b, 0xf0, 0x08, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x08, 0x09,
   0xfd, 0x00, 0x00, 0x01, 0x5f, 0x6a, 0x54, 0xdf, 0xcf, 0x14, 0x09, 0x18, 0x01, 0x02, 0x19, 0x04,
   0x00, 0x36, 0xee, 0x80, 0x15, 0xfd, 0x01, 0x4f, 0x30, 0x82, 0x01, 0x4b, 0x30, 0x82, 0x01, 0x03,
   0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x30, 0x81, 0xf7, 0x02, 0x01, 0x01, 0x30,
   0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff,
   0xff, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x30, 0x5b, 0x04,
   0x20, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xfc, 0x04, 0x20, 0x5a, 0xc6, 0x35, 0xd8, 0xaa, 0x3a, 0x93, 0xe7, 0xb3, 0xeb, 0xbd, 0x55, 0x76,
   0x98, 0x86, 0xbc, 0x65, 0x1d, 0x06, 0xb0, 0xcc, 0x53, 0xb0, 0xf6, 0x3b, 0xce, 0x3c, 0x3e, 0x27,
   0xd2, 0x60, 0x4b, 0x03, 0x15, 0x00, 0xc4, 0x9d, 0x36, 0x08, 0x86, 0xe7, 0x04, 0x93, 0x6a, 0x66,
   0x78, 0xe1, 0x13, 0x9d, 0x26, 0xb7, 0x81, 0x9f, 0x7e, 0x90, 0x04, 0x41, 0x04, 0x6b, 0x17, 0xd1,
   0xf2, 0xe1, 0x2c, 0x42, 0x47, 0xf8, 0xbc, 0xe6, 0xe5, 0x63, 0xa4, 0x40, 0xf2, 0x77, 0x03, 0x7d,
   0x81, 0x2d, 0xeb, 0x33, 0xa0, 0xf4, 0xa1, 0x39, 0x45, 0xd8, 0x98, 0xc2, 0x96, 0x4f, 0xe3, 0x42,
   0xe2, 0xfe, 0x1a, 0x7f, 0x9b, 0x8e, 0xe7, 0xeb, 0x4a, 0x7c, 0x0f, 0x9e, 0x16, 0x2b, 0xce, 0x33,
   0x57, 0x6b, 0x31, 0x5e, 0xce, 0xcb, 0xb6, 0x40, 0x68, 0x37, 0xbf, 0x51, 0xf5, 0x02, 0x21, 0x00,
   0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xbc, 0xe6, 0xfa, 0xad, 0xa7, 0x17, 0x9e, 0x84, 0xf3, 0xb9, 0xca, 0xc2, 0xfc, 0x63, 0x25, 0x51,
   0x02, 0x01, 0x01, 0x03, 0x42, 0x00, 0x04, 0x49, 0xf0, 0x74, 0x07, 0x53, 0x0e, 0xc5, 0xf0, 0x01,
   0x25, 0x06, 0xe6, 0x11, 0x15, 0x25, 0xca, 0xcf, 0xa1, 0xaa, 0x23, 0x43, 0xf7, 0xd5, 0xda, 0xef,
   0xfc, 0xa4, 0x1d, 0xe4, 0x7b, 0xa5, 0x3f, 0x58, 0xfb, 0x22, 0xe3, 0x02, 0x57, 0xc5, 0xae, 0xe1,
   0xac, 0xd6, 0x71, 0xc0, 0x74, 0x5b, 0xb5, 0xed, 0x66, 0x2f, 0xe5, 0x8d, 0xcb, 0xaf, 0x50, 0x23,
   0xe5, 0x23, 0x1b, 0x03, 0x59, 0xa2, 0xe0, 0x16, 0x53, 0x1b, 0x01, 0x03, 0x1c, 0x24, 0x07, 0x22,
   0x08, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x68, 0x6f, 0x6d, 0x65, 0x08, 0x05, 0x6f, 0x77,
   0x6e, 0x65, 0x72, 0x08, 0x03, 0x4b, 0x45, 0x59, 0x08, 0x08, 0x96, 0x51, 0x7d, 0xbc, 0xe3, 0xe7,
   0x6b, 0xf0, 0xfd, 0x00, 0xfd, 0x26, 0xfd, 0x00, 0xfe, 0x0f, 0x31, 0x39, 0x37, 0x30, 0x30, 0x31,
   0x30, 0x31, 0x54, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xfd, 0x00, 0xff, 0x0f, 0x32, 0x30, 0x33,
   0x37, 0x31, 0x30, 0x32, 0x34, 0x54, 0x32, 0x32, 0x35, 0x31, 0x30, 0x38, 0x17, 0x48, 0x30, 0x46,
   0x02, 0x21, 0x00, 0x9d, 0xb9, 0xca, 0xd6, 0x8c, 0x12, 0xaf, 0x80, 0xdc, 0x91, 0x79, 0xfb, 0x94,
   0xce, 0x8a, 0xc1, 0xbf, 0x58, 0x3d, 0x9c, 0xb1, 0x1a, 0x5c, 0x34, 0xa9, 0x01, 0xb4, 0x4e, 0x96,
   0x49, 0xcb, 0x50, 0x02, 0x21, 0x00, 0xe6, 0x6b, 0xb2, 0x87, 0xef, 0xf3, 0xb7, 0x0c, 0x85, 0xca,
   0x26, 0xca, 0x40, 0xbc, 0x3d, 0x90, 0xf5, 0x86, 0xec, 0x42, 0x4b, 0x0f, 0x87, 0xbc, 0x93, 0xa0,
   0xe6, 0x75, 0xf8, 0xf6, 0x0c, 0x9e};


const uint8_t CERT_DATA_DEVICE[] =
  {0x06, 0xfd, 0x02, 0x45, 0x07, 0x3d, 0x08, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2d, 0x68, 0x6f,
   0x6d, 0x65, 0x08, 0x02, 0x62, 0x74, 0x08, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x08, 0x03,
   0x64, 0x76, 0x31, 0x08, 0x03, 0x4b, 0x45, 0x59, 0x08, 0x08, 0xef, 0x04, 0x7e, 0x41, 0xec, 0x6c,
   0x52, 0x8f, 0x08, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x08, 0x09, 0xfd, 0x00, 0x00, 0x01, 0x5f, 0x6a,
   0x54, 0xdf, 0xd1, 0x14, 0x09, 0x18, 0x01, 0x02, 0x19, 0x04, 0x00, 0x36, 0xee, 0x80, 0x15, 0xfd,
   0x01, 0x4f, 0x30, 0x82, 0x01, 0x4b, 0x30, 0x82, 0x01, 0x03, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce,
   0x3d, 0x02, 0x01, 0x30, 0x81, 0xf7, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,
   0xce, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x30, 0x5b, 0x04, 0x20, 0xff, 0xff, 0xff, 0xff, 0x00,
   0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x04, 0x20, 0x5a, 0xc6, 0x35,
   0xd8, 0xaa, 0x3a, 0x93, 0xe7, 0xb3, 0xeb, 0xbd, 0x55, 0x76, 0x98, 0x86, 0xbc, 0x65, 0x1d, 0x06,
   0xb0, 0xcc, 0x53, 0xb0, 0xf6, 0x3b, 0xce, 0x3c, 0x3e, 0x27, 0xd2, 0x60, 0x4b, 0x03, 0x15, 0x00,
   0xc4, 0x9d, 0x36, 0x08, 0x86, 0xe7, 0x04, 0x93, 0x6a, 0x66, 0x78, 0xe1, 0x13, 0x9d, 0x26, 0xb7,
   0x81, 0x9f, 0x7e, 0x90, 0x04, 0x41, 0x04, 0x6b, 0x17, 0xd1, 0xf2, 0xe1, 0x2c, 0x42, 0x47, 0xf8,
   0xbc, 0xe6, 0xe5, 0x63, 0xa4, 0x40, 0xf2, 0x77, 0x03, 0x7d, 0x81, 0x2d, 0xeb, 0x33, 0xa0, 0xf4,
   0xa1, 0x39, 0x45, 0xd8, 0x98, 0xc2, 0x96, 0x4f, 0xe3, 0x42, 0xe2, 0xfe, 0x1a, 0x7f, 0x9b, 0x8e,
   0xe7, 0xeb, 0x4a, 0x7c, 0x0f, 0x9e, 0x16, 0x2b, 0xce, 0x33, 0x57, 0x6b, 0x31, 0x5e, 0xce, 0xcb,
   0xb6, 0x40, 0x68, 0x37, 0xbf, 0x51, 0xf5, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
   0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbc, 0xe6, 0xfa, 0xad, 0xa7, 0x17,
   0x9e, 0x84, 0xf3, 0xb9, 0xca, 0xc2, 0xfc, 0x63, 0x25, 0x51, 0x02, 0x01, 0x01, 0x03, 0x42, 0x00,
   0x04, 0xbd, 0x31, 0x22, 0x50, 0x3c, 0x09, 0xbb, 0xbc, 0x8e, 0xb7, 0x3e, 0x56, 0x85, 0xae, 0x58,
   0x53, 0xc8, 0x1c, 0xaa, 0xe4, 0x6f, 0x97, 0x42, 0xd8, 0xbc, 0x09, 0xd6, 0x57, 0x31, 0x8c, 0x53,
   0x55, 0x88, 0x27, 0xb3, 0xc8, 0xa7, 0xc7, 0x66, 0x2e, 0xa8, 0x1e, 0xbf, 0x5f, 0xe8, 0x3d, 0x2f,
   0x94, 0xbe, 0x2e, 0x40, 0xe9, 0xe7, 0x78, 0x15, 0x15, 0x97, 0x36, 0xfc, 0x44, 0xdc, 0x97, 0x39,
   0x4d, 0x16, 0x5d, 0x1b, 0x01, 0x03, 0x1c, 0x2e, 0x07, 0x2c, 0x08, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
   0x6c, 0x2d, 0x68, 0x6f, 0x6d, 0x65, 0x08, 0x02, 0x62, 0x74, 0x08, 0x06, 0x64, 0x65, 0x76, 0x69,
   0x63, 0x65, 0x08, 0x03, 0x64, 0x76, 0x31, 0x08, 0x03, 0x4b, 0x45, 0x59, 0x08, 0x08, 0xef, 0x04,
   0x7e, 0x41, 0xec, 0x6c, 0x52, 0x8f, 0xfd, 0x00, 0xfd, 0x26, 0xfd, 0x00, 0xfe, 0x0f, 0x31, 0x39,
   0x37, 0x30, 0x30, 0x31, 0x30, 0x31, 0x54, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xfd, 0x00, 0xff,
   0x0f, 0x32, 0x30, 0x33, 0x37, 0x31, 0x30, 0x32, 0x34, 0x54, 0x32, 0x32, 0x35, 0x31, 0x30, 0x38,
   0x17, 0x47, 0x30, 0x45, 0x02, 0x21, 0x00, 0xd9, 0x30, 0x8e, 0xd1, 0x9c, 0x56, 0xbd, 0x3d, 0x6f,
   0x26, 0x3b, 0x84, 0xa4, 0x55, 0xba, 0x84, 0x55, 0x24, 0x10, 0x8f, 0xe0, 0x2b, 0x9a, 0x48, 0x9f,
   0x85, 0xb4, 0x0f, 0x20, 0x21, 0x98, 0x72, 0x02, 0x20, 0x78, 0x21, 0x04, 0x42, 0x2e, 0xdb, 0xcf,
   0x02, 0xa9, 0x7a, 0xc7, 0x5b, 0x69, 0x20, 0xd3, 0xe1, 0x48, 0x48, 0xa5, 0x94, 0xda, 0xe4, 0xf1,
   0x03, 0xac, 0x90, 0xef, 0xfd, 0x54, 0xbc, 0x61, 0x25};

const std::string PIN = "12345";


Certificate
toCertificate(const uint8_t* buf, size_t size)
{
  return Certificate(Block(buf, size));
}

Certificate
toCertificate(const std::string& hex)
{
  shared_ptr<Buffer> buf = ndn::fromHex(hex);
  return Certificate(Block(buf));
}

class Step3Fixture
{
public:
  Step3Fixture()
  {
    auto b = make_shared<Block>(CERT_DATA_DEVICE, sizeof(CERT_DATA_DEVICE));
    clientCertHex = ndn::toHex(CERT_DATA_DEVICE, sizeof(CERT_DATA_DEVICE));
    std::string dataContent = R2 + "|" + clientCertHex + "|" + "34256";
    ndn::ConstBufferPtr secretKey = generateSecret(PIN);
    ConstBufferPtr cipher = sec::encrypt_aes(dataContent, secretKey);

    dummyData = make_shared<Data>(STEP_3_DATA_NAME);
    dummyData->setContent(cipher);
    dummyData->setContentType(ndn::tlv::ContentType_Blob);

    // dummy payload
    dummyPayload = make_shared<Step3Payload>(R2, clientCertHex);

    // session
    auto keychain = make_shared<KeyChain>("pib-memory", "tpm-memory", true);
    Identity id = keychain->createIdentity(DEV_NAME);

    session = make_shared<BtSession>(id);
    auto face = make_shared<util::DummyClientFace>();

    auto deviceCfg =
      make_shared<DeviceConfig>("/local-home/bt/device", "/local-home/bt/owner", DEV_ID, PIN);

    auto state_3 = make_shared<WaitingForGwAuth>(face, keychain, session, deviceCfg);
    state_3->setR2(R2);
    session->setState(state_3);
    cert = make_shared<Certificate>(*b);
  };

public:
  shared_ptr<BtSession> session;
  shared_ptr<Data> dummyData;

  shared_ptr<Step3Payload> dummyPayload;
  shared_ptr<Certificate> cert;
  std::string clientCertHex;
};

TEST_CASE("STAT_3 - parse payload")
{
  Step3Fixture fixture;
  Step3Payload payload = parseStep3Payload(fixture.session, *fixture.dummyData);
  REQUIRE(payload.R2 == R2);
  REQUIRE(payload.certEncoded == fixture.clientCertHex);
}

TEST_CASE("STATE_3 - validateR2")
{
  Step3Fixture fixture;

  SECTION("CORRECT R2")
  {
    REQUIRE_NOTHROW(validateR2(fixture.session, *fixture.dummyPayload));
  }

  SECTION("INCORRECT R2")
  {
    std::string dataContent = R2 + "1" + "|" + fixture.clientCertHex + "|" + "12345";
    auto dummyData = make_shared<Data>(STEP_3_DATA_NAME);
    dummyData->setContent(Block(dataContent.data(), dataContent.size()));
    Step3Payload payload(R2 + "1", fixture.dummyPayload->certEncoded);
    REQUIRE_THROWS(validateR2(fixture.session, payload));
  }
}

TEST_CASE_METHOD(Step3Fixture, "STATE_3 - parseCert")
{
  REQUIRE_NOTHROW(parseDeviceCertificate(session, *dummyPayload));
  REQUIRE(session->getCurrentState()->getConfig()->deviceCert != nullptr);
  REQUIRE(session->getCurrentState()->getConfig()->deviceCert->getName() == cert->getName());
  // REQUIRE(session->getCurrentState()->getConfig()->deviceCert == cert);
}


} // namespace test
} // namespace impl
} // namespace protocol
} // namespace nacapp